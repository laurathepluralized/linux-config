" Laura's .vimrc additions

syntax enable
syntax on

" Stop vim from folding everything it can find to fold upon file open
set nofoldenable

" My preferred colors
" colorscheme Iosvkem
" have to do this earlier, so in linux-config/.vimrc

" This var, NVIM_TUI_ENABLE_CURSOR_SHAPE, isn't used anymore. Instead, put
" set guicursor=
" in ~/.config/nvim/init.vim to stop attempts at cursor shaping.
" let $NVIM_TUI_ENABLE_CURSOR_SHAPE=0


let g:airline#extensions#tabline#enabled = 1
set laststatus=2 " Always display the statusline in all windows
set showtabline=2 " Always display the tabline, even if there is only one tab

set smartcase

" pulse line on moving to next item in search
let g:vim_search_pulse_mode = 'cursor_line'
let g:vim_search_pulse_disable_auto_mappings = 1
nmap n n<Plug>Pulse
nmap N N<Plug>Pulse
nmap * *<Plug>Pulse
nmap # #<Plug>Pulse
cmap <silent> <expr> <enter> search_pulse#PulseFirst()
" Pulse line when I push ; to flash line with cursor
" Want something along the lines of https://www.reddit.com/r/vim/comments/1z1ndk/do_you_knowcan_you_think_of_a_way_to/cfpyh57
nmap ;; <Plug>Pulse



" Tell vim to look for ctags tags files from current directory up to the repos
" directory so I don't have to open every file from project root directory to
" use tags
" http://benoithamelin.tumblr.com/post/15101202004/using-vim-exuberant-ctags-easy-source-navigation
set tags=./tags;~/repos

" Let me have up to 50 tabs
if &tabpagemax < 50
    set tabpagemax=50
endif

" Always leave at least one line above or below the highlighted search term
" so the search term isn't at the very edge of the top or bottom
if !&scrolloff
    set scrolloff=1
endif
" Similar for side
if !&sidescrolloff
    set sidescrolloff=5
endif
" If a single line is long and would cause Vim to show a bunch of
" @@@ or ~~~ until the entire line gets scrolled onto screen,
" instead just print as much of the line as possible
set display+=lastline

" syntastic
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
nnoremap <localleader>e :SyntasticCheck<CR>

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['flake8']
" let g:syntastic_python_checkers = ['pylint']
let g:syntastic_enable_r_lintr_checker = 1
let g:syntastic_r_checkers = ['lintr']

" note for cppcheck, you probably need a '-I' set, so use
" let g:syntastic_cpp_cppcheck_args = '-I /path/to/incl/ -I /path/to/other_incl'
"
" for cpplint, you might want
" let g:syntastic_cpp_cpplint_args = '--root=/path/to/project/root --recursive'
let g:syntastic_cpp_checkers = ['cpplint']
"let g:syntastic_cpp_checkers = []
"let g:syntastic_cpp_cpplint_exec = 'cpplint'
let g:syntastic_aggregate_errors = 1

" tab is ALWAYS ALWAYS ALWAYS four spaces, which is equivalent to one indent.
" except for xml, and maybe I should add javascript for its awkward half-tabs?
set expandtab
set smarttab
autocmd FileType xml setlocal shiftwidth=2 tabstop=2
autocmd FileType cpp setlocal shiftwidth=4 tabstop=4
autocmd FileType c setlocal shiftwidth=4 tabstop=4
autocmd FileType python setlocal shiftwidth=4 tabstop=4
autocmd FileType text setlocal shiftwidth=4 tabstop=4
autocmd FileType tex setlocal shiftwidth=4 tabstop=4
autocmd FileType sh setlocal shiftwidth=4 tabstop=4

" Add <> to the types of pairs Vim recognizes as matching (to go between them
" with %)
set matchpairs+=<:>

" This looks useful:
"http://stackoverflow.com/questions/2514445/turning-off-auto-indent-when-pasting-text-into-vim?rq=1

" Search settings
set smartcase " search should become case-sensitive if there are upper-case characters

" File types
set fileformat=unix
set fileformats=unix,dos " only detect unix file format, and display  in dos files

set showmatch " briefly show matching bracket
set matchtime=2 " show matching bracket for 0.2 seconds

" Wrap lines for text and LaTeX files, but not for other types
au BufRead,BufNewFile *.txt,*.tex set wrap linebreak nolist textwidth=0 wrapmargin=0

" from http://vim.wikia.com/wiki/80_character_line_wrap_without_broken_words
set formatoptions+=w
" set tw=80
" I don't think you can map W, or at least not without more vim-fu
" but gqip will break lines at 80 chars (probably tw) for an entire paragraph
" (boundaries are blank lines)
" map <localleader>W gqip

" Save macros:
" https://www.reddit.com/r/vim/comments/1ramn9/whats_the_best_way_to_save_macros_persistently/cdlau12/

" Make resizing horizontal splits less aggravating
" nmap <silent> <Leader>hh :res -10<cr>
" nmap <silent> <Leader>hc :res +10<cr>

" Netrw list setting
let g:netrw_liststyle = 1

" http://vim.wikia.com/wiki/Switching_case_of_characters#Twiddle_case
function! TwiddleCase(str)
  if a:str ==# toupper(a:str)
    let result = tolower(a:str)
  elseif a:str ==# tolower(a:str)
    " next line inspired by http://vim.wikia.com/wiki/Switching_case_of_characters#Comments
    let result = substitute(a:str,'\(\<\([A-ZÀ-Ý]\)\([A-ZÀ-Ý]\+\)\>\)', '\u\1', 'g')
  else
    let result = toupper(a:str)
  endif
  return result
endfunction
vnoremap ~ y:call setreg('', TwiddleCase(@"), getregtype(''))<CR>gv""Pgv

" Rainbow parentheses
let g:rainbow#max_level = 5
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}'], ['<', '>']]
let g:rainbow#blacklist = [231, 244, 253, #ffffff, #808080, #dddddd]
au VimEnter * RainbowParentheses
" Uncomment this line to test RainbowParentheses (((())))

" copied from https://stackoverflow.com/a/7238791
set tabline=%!MyTabLine()

function! MyTabLine()
  let s = ''
  for i in range(tabpagenr('$'))
    " select the highlighting
    if i + 1 == tabpagenr()
      let s .= '%#TabLineSel#'
    else
      let s .= '%#TabLine#'
    endif

    " set the tab page number (for mouse clicks)
    let s .= '%' . (i + 1) . 'T'

    " the label is made by MyTabLabel()
    let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
  endfor

  " after the last tab fill with TabLineFill and reset tab page nr
  let s .= '%#TabLineFill#%T'

  " right-align the label to close the current tab page
  if tabpagenr('$') > 1
    let s .= '%=%#TabLine#%999Xclose'
  endif

  return s
endfunction

function! MyTabLabel(n)
  let buflist = tabpagebuflist(a:n)
  let winnr = tabpagewinnr(a:n)
  let label =  bufname(buflist[winnr - 1])
  return fnamemodify(label, ":t")[:10]
endfunction

let g:ct=0
function! PrefixStatusLine()
     set statusline=
     set statusline+=%-4c
     set statusline+=%l/%-6L	"line number / total lines
     set statusline+=%-8y		"show the file-type
endfunction

function! PostfixStatusLine()
     set statusline+=%=			"now go to the right side of the statusline
     set statusline+=%-3m
     set statusline+=%<%f			"full path on the right side
endfunction

function! ToString(inp)
  return a:inp
endfunction







" REMINDER
" Space is leader
" \ is localleader
" ---
" For future reference, for vinegar.vim, from the vinegar.vim README
" (https://github.com/tpope/vim-vinegar.git)

" Press - in any buffer to hop up to the directory listing and seek to the
" file you just came from. Keep bouncing to go up, up, up. Having rapid
" directory access available changes everything.

" All that annoying crap at the top is turned off, leaving you with nothing
" but a list of files. This is surprisingly disorienting, but ultimately very
" liberating. Press I to toggle until you adapt.

" The oddly C-biased default sort order is replaced with a sensible
" application of 'suffixes'.

" File hiding: files are not listed that match with one of the patterns in
" 'wildignore'.

" If you put let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+' in your vimrc,
" vinegar will initialize with dot files hidden. Press gh to toggle dot file
" hiding.

" Press . on a file to pre-populate it at the end of a : command line. This is
" great, for example, to quickly initiate a :grep of the file or directory
" under the cursor. There's also !, which starts the line off with a bang.
" Type !chmod +x and get :!chmod +x path/to/file.

" Press y. to yank an absolute path for the file under the cursor.

" Press ~ to go home.


