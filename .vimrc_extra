" Laura's .vimrc additions

" tab is ALWAYS ALWAYS ALWAYS four spaces, which is equivalent to one indent.
" except for xml, and maybe I should add javascript for its awkward half-tabs?
set expandtab
set smarttab
autocmd FileType xml setlocal shiftwidth=2 tabstop=2
autocmd FileType cpp setlocal shiftwidth=4 tabstop=4
autocmd FileType c setlocal shiftwidth=4 tabstop=4
autocmd FileType python setlocal shiftwidth=4 tabstop=4
autocmd FileType text setlocal shiftwidth=4 tabstop=4
autocmd FileType tex setlocal shiftwidth=4 tabstop=4
autocmd FileType sh setlocal shiftwidth=4 tabstop=4

" Add <> to the types of pairs Vim recognizes as matching (to go between them
" with %)
set matchpairs+=<:>

" This looks useful:
"http://stackoverflow.com/questions/2514445/turning-off-auto-indent-when-pasting-text-into-vim?rq=1

" Search settings
set smartcase " search should become case-sensitive if there are upper-case characters

" File types
set fileformat=unix
set fileformats=unix,dos " only detect unix file format, and display  in dos files

set showmatch " briefly show matching bracket
set matchtime=2 " show matching bracket for 0.2 seconds

" Wrap lines for text and LaTeX files, but not for other types
au BufRead,BufNewFile *.txt,*.tex set wrap linebreak nolist textwidth=0 wrapmargin=0

" from http://vim.wikia.com/wiki/80_character_line_wrap_without_broken_words
set formatoptions+=w
" set tw=80
nnoremap <localleader>W gqip

" Encoded by following this process:
" https://www.reddit.com/r/vim/comments/1ramn9/whats_the_best_way_to_save_macros_persistently/cdlau12/
" Take the current line, put \cite{ at the beginning and } at the end, then go
" to the next line
nmap <localleader>c I\cite{A}j

" Make resizing horizontal splits less aggravating
" nmap <silent> <Leader>hh :res -10<cr>
" nmap <silent> <Leader>hc :res +10<cr>

" Netrw list setting
let g:netrw_liststyle = 1

" Enter a line below current line and stay in command mode
" (just push Enter in command mode)
nmap <CR> o<Esc>k

" http://vim.wikia.com/wiki/Switching_case_of_characters#Twiddle_case
function! TwiddleCase(str)
  if a:str ==# toupper(a:str)
    let result = tolower(a:str)
  elseif a:str ==# tolower(a:str)
    " next line inspired by http://vim.wikia.com/wiki/Switching_case_of_characters#Comments
    let result = substitute(a:str,'\(\<\([A-ZÀ-Ý]\)\([A-ZÀ-Ý]\+\)\>\)', '\u\1', 'g')
  else
    let result = toupper(a:str)
  endif
  return result
endfunction
vnoremap ~ y:call setreg('', TwiddleCase(@"), getregtype(''))<CR>gv""Pgv




" Move between splits more easily
" nnoremap gh <C-W><C-H>
" nnoremap gj <C-W><C-J>
" nnoremap gk <C-W><C-K>
" nnoremap gl <C-W><C-L>

" REMINDER
" Space is leader
" \ is localleader


